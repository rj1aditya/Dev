In CPP11 type inference to automatic deduction of the data type during the initialization of the variable.
1. auto
2. decltype

1. auto: e.g. 
          auto a = 10;
in place of data type auto keyword used, and type decuction done by the compiler itself. Since compiler would know 
the type with 10 integral value.

  e.g. When returning value from a funcion;
  
  auto sum = Add(10,30);
  
  Note: Note that this only works when initializing a variable upon creation. Variables created without initialization values can not use this feature 
  (as C++ has no context from which to deduce the type).
  
  
  The auto keyword can’t be used with function parameters

Many new programmers try something like this:

#include <iostream>
 
void addAndPrint(auto x, auto y)
{
    std::cout << x + y;
}
This won’t work, because the compiler can’t infer types for function parameters x and y at compile time.

If you’re looking to create functions that work with a variety of different types, you should be using function templates, not type inference.
This restriction may be lifted in future versions of C++ (with auto acting as a shorthand way to create function templates), 
but as of C++14 this is not supported.

---------------------------------------------
Type inference for functions in C++14

In C++14, the auto keyword was extended to be able to auto-deduce a function’s return type. Consider:

auto add(int x, int y)
{
    return x + y;
}
Since x + y evaluates to an integer, the compiler will deduce this function should have a return type of int.

While this may seem neat, we recommend that this syntax be avoided for functions. 
The return type of a function is of great use in helping to document for the caller what a function is expected to return. 
When a specific type isn’t specified, the caller may misinterpret what type the function will return, which can lead to inadvertent error.

------------------------------------
Trailing return type syntax in C++11

C++11 also added the ability to use a trailing return syntax, where the return type is specified after the rest of the function prototype

Consider the following function declaration:

int add(int x, int y);
In C++11, this could be equivalently written as:

auto add(int x, int y) -> int;
In this case, auto does not perform type inference -- it is just part of the syntax to use a trailing return type.

Why would you want to use this?
One nice thing is that it makes all of your function names line up:

auto add(int x, int y) -> int;
auto divide(double x, double y) -> double;
auto printSomething() -> void;
auto generateSubstring(const std::string &s, int start, int len) -> std::string;

But it is of more use when combined with some advanced C++ features, such as classes and the decltype keyword. 
We’ll talk more about the other auto uses when we cover the decltype keyword.
