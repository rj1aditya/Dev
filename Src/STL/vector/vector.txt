* Vectors are same as dynamic arrays.
* With the ability to resize itself automatically when an element is inserted or deleted.
* Storage being handled automatically by the container.

Time complexity:
* Inserting at the end takes differential time, as sometimes there may be a need of extending the array.
* Removing the last element takes only constant time because no resizing happens. 
* Inserting and erasing at the beginning or in the middle is linear in time.

Iterators

* begin() – Returns an iterator pointing to the first element in the vector
* end() – Returns an iterator pointing to the theoretical element that follows the last element in the vector

e.g.
int main(){
    vector<int> g1;
    for (int i = 1; i <= 5; i++)
        g1.push_back(i);
  
    cout << "Output of begin and end: ";
    for (auto i = g1.begin(); i != g1.end(); ++i) // <<<<<<<<<<<<<<<<<<<<<<<<< accessed through iterator
        cout << *i << " ";
}

Capacity:
follow from the  above example

* size() – Returns the number of elements in the vector. >>>>>> g1.size() returns 5
* max_size() – Returns the maximum number of elements that the vector can hold.
* capacity() – Currently allocated space to the vector.>>>>>> g1.capacity() returns 8
* resize(n) – Resizes the container so that it contains ‘n’ elements. 
* empty() – Returns whether the container is empty. >>>>>> g1.empty() returns false

Element access:
* at(g) – Returns a reference to the element at position ‘g’ in the vector
* front() – Returns a reference to the first element in the vector
* back() – Returns a reference to the last element in the vector

Modifiers:
* assign() – It assigns new value to the vector elements by replacing old ones
// fill the array with 10 five times
    v.assign(5, 10);

* push_back() – It push the elements into a vector from the back
* pop_back() – It is used to pop or remove elements from a vector from the back.
* insert() – It inserts new elements before the element at the specified position
// inserts 5 at the beginning
    v.insert(v.begin(), 5);
* erase() – It is used to remove elements from a container from the specified position or range.
* clear() – It is used to remove all the elements of the vector container.
* swap() – It is used to swap the contents of one vector with another vector of same type. Sizes may differ.
* emplace() – It extends the container by inserting new element at position, it is same as insert 
but it returns a iterator to the newly created node.
* ? emplace_back() – It is used to insert a new element into the vector container, 
the new element is added to the end of the vector, similar like push_back. What difference will figure out.

